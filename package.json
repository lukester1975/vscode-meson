{
  "name": "mesonbuild",
  "displayName": "Meson",
  "description": "Meson language support for Visual Studio Code",
  "icon": "graphics/icon.png",
  "version": "1.7.1",
  "license": "Apache-2.0",
  "publisher": "mesonbuild",
  "author": {
    "name": "The Meson Project"
  },
  "contributors": [
    {
      "name": "Ali Sabil"
    },
    {
      "name": "Nathan Graule",
      "email": "solarliner@gmail.com",
      "url": "https://solarliner.me"
    },
    {
      "name": "Dylan Baker",
      "email": "dylan@pnwbakers.com",
      "url": "https://recursiveascent.blogspot.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mesonbuild/vscode-meson.git"
  },
  "bugs": {
    "url": "https://github.com/mesonbuild/vscode-meson/issues"
  },
  "homepage": "https://github.com/mesonbuild/vscode-meson/blob/master/README.md",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onLanguage:meson",
    "onCommand:mesonbuild.configure",
    "onCommand:mesonbuild.build",
    "onCommand:mesonbuild.test",
    "onCommand:mesonbuild.benchmark",
    "workspaceContains:meson.build",
    "onDebugDynamicConfigurations",
    "onDebugDynamicConfigurations:cppdbg",
    "onStartupFinished"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "commands": [
      {
        "command": "mesonbuild.openBuildFile",
        "title": "Open meson.build",
        "icon": "$(preferences-open-settings)"
      },
      {
        "command": "mesonbuild.configure",
        "title": "Meson: Configure",
        "icon": {
          "dark": "res/meson_32.svg",
          "light": "res/meson_32.svg"
        }
      },
      {
        "command": "mesonbuild.builddir.reconfigure",
        "title": "Reconfigure"
      },
      {
        "command": "mesonbuild.builddir.clean",
        "title": "Clean"
      },
      {
        "command": "mesonbuild.clean",
        "title": "Meson: Clean"
      },
      {
        "command": "mesonbuild.build",
        "title": "Meson: Build"
      },
      {
        "command": "mesonbuild.node.build",
        "title": "Build"
      },
      {
        "command": "mesonbuild.node.debug",
        "title": "Debug"
      },
      {
        "command": "mesonbuild.node.run",
        "title": "Run"
      },
      {
        "command": "mesonbuild.test",
        "title": "Meson: Run Unit Tests"
      },
      {
        "command": "mesonbuild.install",
        "title": "Meson: Install"
      },
      {
        "command": "mesonbuild.benchmark",
        "title": "Meson: Run Benchmarks"
      }
    ],
    "configuration": {
      "title": "Meson build configuration",
      "properties": {
        "mesonbuild.configureOnOpen": {
          "type": [
            "boolean",
            "string"
          ],
          "default": "ask",
          "enum": [
            true,
            false,
            "ask"
          ],
          "enumDescriptions": [
            "Automatically configure on open",
            "Never configure on open",
            "Ask every time"
          ],
          "description": "Have VS Code run Meson configure on opening a folder."
        },
        "mesonbuild.buildFolder": {
          "type": "string",
          "default": "builddir",
          "description": "Specify in which folder Meson build configure and build the project."
        },
        "mesonbuild.configureOptions": {
          "type": "array",
          "default": [
            "--buildtype=debug"
          ],
          "description": "Specify the list of configuration options used for Meson configuration."
        },
        "mesonbuild.setupOptions": {
          "type": "array",
          "default": [],
          "description": "Specify the list of setup options used for Meson setup. Can be used to specify a cross file (use --cross-file=FILE)."
        },
        "mesonbuild.mesonPath": {
          "type": "string",
          "default": "meson",
          "description": "Specify the meson executable to use"
        },
        "mesonbuild.muonPath": {
          "type": "string",
          "default": "muon",
          "description": "Specify the muon executable to use"
        },
        "mesonbuild.linting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Globally enable/disable linting"
        },
        "mesonbuild.linter.muon.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable muon linter"
        },
        "mesonbuild.formatting.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Globally enable/disable formatting"
        },
        "mesonbuild.formatting.provider": {
          "type": "string",
          "default": "muon",
          "enum": [
            "muon"
          ],
          "description": "Select which formatting provider to use"
        },
        "mesonbuild.formatting.muonConfig": {
          "type": "string",
          "default": null,
          "description": "Path to muon formatter config.ini"
        },
        "mesonbuild.debugOptions": {
          "type": "object",
          "default": {
            "setupCommands": [
              {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
              }
            ]
          },
          "description": "Give an object that's merged into the debug configuration provider"
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "meson",
        "required": [
          "mode"
        ],
        "properties": {
          "target": {
            "type": "string",
            "description": "The Meson target to... target",
            "default": "all",
            "dependencies": {
              "mode": {
                "enum": [
                  "build",
                  "test"
                ]
              }
            }
          },
          "filename": {
            "type": "string",
            "description": "Filename to run as part of the target",
            "dependencies": {
              "mode": {
                "enum": [
                  "run"
                ]
              }
            }
          },
          "mode": {
            "type": "string",
            "description": "Specify the kind of task to perform",
            "enum": [
              "build",
              "run",
              "test",
              "reconfigure",
              "clean",
              "install"
            ],
            "default": "build"
          }
        }
      }
    ],
    "languages": [
      {
        "id": "meson",
        "aliases": [
          "Meson",
          "meson",
          "mesonbuild"
        ],
        "filenames": [
          "meson.build",
          "meson_options.txt"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "meson",
        "scopeName": "source.meson",
        "path": "./syntaxes/meson.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "meson",
        "path": "./snippets/meson.json"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "meson-sidebar",
          "title": "Meson",
          "icon": "res/meson_32.svg"
        }
      ]
    },
    "views": {
      "meson-sidebar": [
        {
          "id": "meson-project",
          "name": "",
          "when": "mesonbuild.hasProject"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "mesonbuild.openBuildFile",
          "when": "false"
        },
        {
          "command": "mesonbuild.node.build",
          "when": "false"
        },
        {
          "command": "mesonbuild.node.debug",
          "when": "false"
        },
        {
          "command": "mesonbuild.node.run",
          "when": "false"
        },
        {
          "command": "mesonbuild.builddir.reconfigure",
          "when": "false"
        },
        {
          "command": "mesonbuild.builddir.clean",
          "when": "false"
        }
      ],
      "view/item/context": [
        {
          "command": "mesonbuild.openBuildFile",
          "when": "view == meson-project && viewItem == meson-target",
          "group": "inline"
        },
        {
          "command": "mesonbuild.configure",
          "when": "view == meson-project && viewItem == meson-projectroot || view == meson-project && viewItem == meson-workspaceroot",
          "group": "inline"
        },
        {
          "command": "mesonbuild.builddir.reconfigure",
          "group": "build",
          "when": "view == meson-project && viewItem == builddir"
        },
        {
          "command": "mesonbuild.builddir.clean",
          "when": "view == meson-project && viewItem == builddir",
          "group": "build"
        },
        {
          "command": "mesonbuild.node.build",
          "when": "view == meson-project && viewItem == meson-target || view == meson-project && viewItem == builddir",
          "group": "build"
        },
        {
          "command": "mesonbuild.node.debug",
          "when": "view == meson-project && viewItem == meson-target",
          "group": "debug"
        },
        {
          "command": "mesonbuild.node.run",
          "when": "view == meson-project && viewItem == test",
          "group": "run"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "meson-gcc",
        "source": "gcc",
        "owner": "meson",
        "fileLocation": [
          "autodetect",
          "${workspaceFolder}/${config:mesonbuild.buildFolder}"
        ],
        "pattern": {
          "regexp": "^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "package": "vsce package",
    "watch": "tsc -watch -p ./",
    "upgrade-all": "yarn upgrade --latest -W"
  },
  "devDependencies": {
    "@types/node": "^18.11.17",
    "@types/vscode": "^1.74.0",
    "typescript": "^4.9.4",
    "vsce": "^2.15.0"
  },
  "dependencies": {}
}
